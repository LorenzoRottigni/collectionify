name: Publish

on:
  push:
    branches: [ main ]

jobs:
  publish:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: ['20.9.0']  # Define your desired Node.js versions here
    steps:
      - uses: actions/checkout@v4
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}

      - name: Git setup
        run: |
          git fetch origin
          git reset --hard ${{ github.sha }}
          git checkout -B ${{ github.sha }}
          git config --global user.name "LorenzoRottigni"
          git config --global user.email "lorenzo@rottigni.net"

      - name: Install dependencies
        run: npm install --no-save  # Matches your GitLab script

      - name: Clean packages
        run: npx lerna clean --yes  # Matches your GitLab script

      - name: Build packages
        run: npx lerna run build  # Matches your GitLab script

      - name: Check for uncommitted changes (informational only)
        run: |
          if [[ -n $(git status -s) ]]; then
            git remote set-url origin "https://${{ secrets.CICD_ACCESS_TOKEN }}@github.com/LorenzoRottigni/collectionify.git"
            git add .
            git commit -m "chore: :bookmark: CI/CD lerna versioning [skip ci]"
            git push origin ${{ github.sha }}
          fi

      - name: Publish packages (from package)
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_ACCESS_TOKEN }}
        run: lerna publish from-git --yes --dist-tag latest 




      # - name: Generate version
      #   run: |  # Combines steps to generate version
      #     COMMIT_HASH=$(git rev-parse --short HEAD)
      #     NEW_VERSION="0.0.1-${COMMIT_HASH:0:7}"
      #     echo "New Version: $NEW_VERSION"  # Optional: Print the version

      # - name: Update version (local only)
      #   run: lerna version "$NEW_VERSION" --yes --no-push --exact --force-publish --no-git-tag-version 
